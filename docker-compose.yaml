version: "3.9"
services:
  #############
  ## Traefik ##
  #############
  # Documentation
  # @see https://doc.traefik.io/traefik
  traefik:
    image: traefik:v2.9.8
    container_name: traefik
    restart: always
    networks:
      - traefik
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/traefik/traefik.yaml:/etc/traefik/traefik.yaml:ro
      - ./docker/traefik/provider.yaml:/etc/traefik/provider.yaml:ro
      - ./.htpasswd:/etc/.htpasswd
      - traefik-acme:/etc/traefik/acme
      - traefik-log:/var/log/traefik
    command:
      - "--certificatesResolvers.letsEncrypt.acme.email=${TRAEFIL_ACME_EMAIL}"
    labels:
      - traefik.enable=true

      - traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.middlewares=auth@file
      - traefik.http.routers.traefik.entryPoints=http

      - traefik.http.routers.traefikHttps.rule=Host(`${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.traefikHttps.service=api@internal
      - traefik.http.routers.traefikHttps.middlewares=auth@file
      - traefik.http.routers.traefikHttps.entryPoints=https
      - traefik.http.routers.traefikHttps.tls.certResolver=letsEncrypt

      - traefik.http.routers.traefikMetrics.rule=Host(`${TRAEFIK_METRICS_DOMAIN}`)
      - traefik.http.routers.traefikMetrics.service=prometheus@internal
      - traefik.http.routers.traefikMetrics.middlewares=auth@file
      - traefik.http.routers.traefikMetrics.entryPoints=http

      - traefik.http.routers.traefikMetricsHttps.rule=Host(`${TRAEFIK_METRICS_DOMAIN}`)
      - traefik.http.routers.traefikMetricsHttps.service=prometheus@internal
      - traefik.http.routers.traefikMetricsHttps.middlewares=auth@file
      - traefik.http.routers.traefikMetricsHttps.entryPoints=https
      - traefik.http.routers.traefikMetricsHttps.tls.certResolver=letsEncrypt
    healthcheck:
      test: traefik version
      interval: 30s
      timeout: 5s
      retries: 3


  ##############
  ## Arangodb ##
  ##############
  # Documentation
  # @see https://www.arangodb.com/docs/stable/http/index.html
  arangodb:
    image: arangodb:3.10.5
    container_name: arangodb
    restart: always
    networks:
      - traefik
      - application
    environment:
      - ARANGO_ROOT_PASSWORD=${ARANGO_ROOT_PASSWORD}
      - ARANGODB_OVERRIDE_DETECTED_TOTAL_MEMORY=${ARANGODB_OVERRIDE_DETECTED_TOTAL_MEMORY}
    volumes:
      - ./docker/arango/config:/arango/config:ro
      - ./docker/arango/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
      - arangodb3:/var/lib/arangodb3
      - arangodb-data:/arango/db
    labels:
      - traefik.enable=true

      - traefik.http.routers.arangodb.rule=Host(`${ARANGO_DOMAIN}`)
      - traefik.http.routers.arangodb.service=arangodb
      - traefik.http.routers.arangodb.entryPoints=http

      - traefik.http.routers.arangodbHttps.rule=Host(`${ARANGO_DOMAIN}`)
      - traefik.http.routers.arangodbHttps.service=arangodb
      - traefik.http.routers.arangodbHttps.entryPoints=https
      - traefik.http.routers.arangodbHttps.tls.certResolver=letsEncrypt

      - traefik.http.services.arangodb.loadbalancer.server.port=8529
    healthcheck:
      test: wget -qO- arangodb:8529
      interval: 30s
      timeout: 5s
      retries: 3


  #############
  ## Grafana ##
  #############
  # Documentation
  # @see https://grafana.com/docs/tempo/latest/configuration
  tempo:
    image: grafana/tempo:1.5.0
    container_name: tempo
    restart: always
    command:
      - "-config.file=/etc/tempo.yaml"
    networks:
      - traefik
      - application
    volumes:
      - ./docker/tempo/tempo.yaml:/etc/tempo.yaml:ro
      - tempo:/tmp/tempo
    labels:
      - traefik.enable=true
      - traefik.http.routers.tempo.rule=Host(`${TEMPO_DOMAIN}`)
      - traefik.http.routers.tempo.middlewares=auth@file
      - traefik.http.routers.tempo.service=tempo
      - traefik.http.routers.tempo.entryPoints=http

      - traefik.http.routers.tempoHttps.rule=Host(`${TEMPO_DOMAIN}`)
      - traefik.http.routers.tempoHttps.middlewares=auth@file
      - traefik.http.routers.tempoHttps.service=tempo
      - traefik.http.routers.tempoHttps.entryPoints=https
      - traefik.http.routers.tempoHttps.tls.certResolver=letsEncrypt

      - traefik.http.services.tempo.loadbalancer.server.port=3200
    healthcheck:
      test: wget -qO- tempo:3200/metrics
      interval: 30s
      timeout: 5s
      retries: 3


  ###########
  ## Kafka ##
  ###########
  # Documentation
  # @see https://docs.confluent.io/platform/current/installation/docker/config-reference.html#zk-configuration
  # @see https://docs.confluent.io/platform/current/zookeeper/deployment.html#configuration-options
  zookeeper:
    user: root
    image: confluentinc/cp-zookeeper:7.3.3
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - application
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    healthcheck:
      test: echo srvr | nc zookeeper 2181
      interval: 10s
      retries: 40

  # Documentation
  # @see https://docs.confluent.io/platform/current/installation/docker/config-reference.html#confluent-ak-configuration
  # @see https://docs.confluent.io/platform/current/installation/configuration/index.html
  kafka:
    image: confluentinc/cp-kafka:7.3.3
    container_name: kafka
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - application
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INNER://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INNER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INNER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9581
      KAFKA_LOG_RETENTION_HOURS: 4
      KAFKA_LOG_ROLL_MS: 600000
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_CLEANUP_POLICY: delete
      KAFKA_RETENTION_MS: 43200000
      KAFKA_MESSAGE_MAX_BYTES: 4000000
      KAFKA_RECEIVE_MESSAGE_MAX_BYTES: 4000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 4000000
    volumes:
      - kafka:/var/lib/kafka/data
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 10s
      retries: 40

  # Documentation
  # @see https://docs.confluent.io/platform/current/installation/docker/config-reference.html#sr-long-configuration
  # @see https://docs.confluent.io/platform/current/schema-registry/installation/config.html
  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.3
    hostname: schema-registry
    container_name: schema-registry
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8085,http://${SCHEMA_REGISTRY_DOMAIN}:80,https://${SCHEMA_REGISTRY_DOMAIN}:443
    networks:
      - traefik
      - application
    labels:
      - traefik.enable=true

      - traefik.http.routers.schemaRegistry.rule=Host(`${SCHEMA_REGISTRY_DOMAIN}`)
      - traefik.http.routers.schemaRegistry.service=schemaRegistry
      - traefik.http.routers.schemaRegistry.middlewares=auth@file
      - traefik.http.routers.schemaRegistry.entryPoints=http

      - traefik.http.routers.schemaRegistryHttps.rule=Host(`${SCHEMA_REGISTRY_DOMAIN}`)
      - traefik.http.routers.schemaRegistryHttps.service=schemaRegistry
      - traefik.http.routers.schemaRegistryHttps.middlewares=auth@file
      - traefik.http.routers.schemaRegistryHttps.entryPoints=https
      - traefik.http.routers.schemaRegistryHttps.tls.certResolver=letsEncrypt

      - traefik.http.services.schemaRegistry.loadbalancer.server.port=8085
    healthcheck:
      test: curl --fail --silent --insecure http://schema-registry:8085/subjects --output /dev/null || exit 1
      interval: 10s
      retries: 40
      start_period: 30s

  # Documentation
  # @see https://docs.confluent.io/platform/current/installation/docker/config-reference.html#kconnect-long-configuration
  # @see https://docs.confluent.io/platform/current/installation/configuration/connect/index.html
  connect:
    image: confluentinc/cp-kafka-connect:7.3.3
    container_name: connect
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_ADVERTISED_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CLASSPATH: /usr/share/java/*
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    networks:
      - application
    volumes:
      - ./docker/kafka-connect-arangodb:/usr/share/java/kafka-connect-arangodb
    healthcheck:
      test: curl -s -f http://connect:8083
      interval: 10s
      timeout: 5s
      retries: 40

  connect-init:
    image: ghcr.io/treeton-org/application-server-connect-init:1.0.0
    container_name: connect-init
    restart: always
    depends_on:
      connect:
        condition: service_healthy
    environment:
      BOOTSTRAP_SERVER: kafka:9092
      CONNECT: connect:8083
      ARANGO_HOST: arangodb
      ARANGO_PORT: 8529
      ARANGO_USER: root
      ARANGO_PASSWORD: "${ARANGO_ROOT_PASSWORD}"
    volumes:
      - ./docker/connect-init:/init/templates:ro
    healthcheck:
      test: /init/check http://connect:8083
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 120s
    networks:
      - application


  ################
  ## Blockchain ##
  ################
  # Source code
  # @see https://github.com/tonlabs/ever-node
  ever-node:
    image: ghcr.io/treeton-org/ever-node:0.52.2
    container_name: ever-node
    restart: always
    depends_on:
      connect:
        condition: service_healthy
      statsd:
        condition: service_healthy
    environment:
      ADNL_PORT: "${EVER_NODE_ADNL_PORT}"
      VALIDATOR_NAME: "${EVER_NODE_VALIDATOR_NAME}"
      CONSOLE_SERVER_PORT: "${EVER_NODE_CONSOLE_SERVER_PORT}"
      STATSD_DOMAIN: 'statsd:'
      STATSD_PORT: 9125
    volumes:
      - ./docker/ever-node/entrypoint:/ever-node/entrypoint:ro
      - ever-node-configs:/ever-node/configs
      - ever-node-db:/ever-node/node_db
      - ever-node-logs:/ever-node/logs
    entrypoint: /ever-node/entrypoint
    networks:
      - application
    ports:
      - "${EVER_NODE_ADNL_PORT}:${EVER_NODE_ADNL_PORT}/udp"
    cap_add:
      - SYS_PTRACE
    logging:
      driver: json-file
      options:
        max-size: "1000m"
        max-file: "100"

  # Documentation
  # @see https://github.com/statsd/statsd
  statsd:
    image: prom/statsd-exporter:v0.23.1
    container_name: statsd
    restart: always
    command:
      - "--statsd.mapping-config=/statsd-mappings/statsd-mapping.yaml"
    networks:
      - traefik
      - application
    volumes:
      - ./docker/statsd/statsd-mapping.yaml:/statsd-mappings/statsd-mapping.yaml:ro
    labels:
      - traefik.enable=true

      - traefik.http.routers.statsd.rule=Host(`${STATSD_DOMAIN}`)
      - traefik.http.routers.statsd.service=statsd
      - traefik.http.routers.statsd.middlewares=auth@file
      - traefik.http.routers.statsd.entryPoints=http

      - traefik.http.routers.statsdHttps.rule=Host(`${STATSD_DOMAIN}`)
      - traefik.http.routers.statsdHttps.service=statsd
      - traefik.http.routers.statsdHttps.middlewares=auth@file
      - traefik.http.routers.statsdHttps.entryPoints=https
      - traefik.http.routers.statsdHttps.tls.certResolver=letsEncrypt

      - traefik.http.services.statsd.loadbalancer.server.port=9102
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "10"
    healthcheck:
      test: wget -qO- http://statsd:9102
      interval: 10s
      timeout: 5s
      retries: 30


  ##################
  ## Query server ##
  ##################
  # Documentation
  # @see https://github.com/tonlabs/ton-q-server#setup
  q-server:
    image: ghcr.io/treeton-org/q-server:0.55.1
    container_name: q-server
    restart: always
    environment:
      - Q_HOST=0.0.0.0
      - Q_PORT=4000
      - Q_ENDPOINTS=http://${Q_SERVER_DOMAIN}:80,https://${Q_SERVER_DOMAIN}:443
      - Q_DATA_MUT=http://root:${ARANGO_ROOT_PASSWORD}@arangodb:8529
      - Q_DATA_HOT=http://root:${ARANGO_ROOT_PASSWORD}@arangodb:8529
      - Q_REQUESTS_SERVER=kafka:9092
      - Q_QUERY_MAX_RUNTIME=60
      - Q_STATSD_SERVER=statsd:9102
      - Q_SLOW_QUERIES=enable
    networks:
      - traefik
      - application
    depends_on:
      kafka:
        condition: service_healthy
      arangodb:
        condition: service_healthy
    labels:
      - traefik.enable=true

      - traefik.http.routers.qServer.rule=Host(`${Q_SERVER_DOMAIN}`)
      - traefik.http.routers.qServer.service=qServer
      - traefik.http.routers.qServer.entryPoints=http

      - traefik.http.routers.qServerHttps.rule=Host(`${Q_SERVER_DOMAIN}`)
      - traefik.http.routers.qServerHttps.service=qServer
      - traefik.http.routers.qServerHttps.entryPoints=https
      - traefik.http.routers.qServerHttps.tls.certResolver=letsEncrypt

      - traefik.http.services.qServer.loadbalancer.server.port=4000


networks:
  traefik:
    external: true
    name: traefik
  application:

volumes:
  traefik-acme:
  traefik-log:
  arangodb3:
  arangodb-data:
  tempo:
  zookeeper-data:
  zookeeper-log:
  kafka:
  ever-node-configs:
    external: true
  ever-node-db:
  ever-node-logs:
